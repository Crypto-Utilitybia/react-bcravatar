{"version":3,"sources":["../../src/constants.js","../../src/index.js","App.js","index.js"],"names":["infuras","network","id","1","4","56","137","contracts","contractABI","inputs","internalType","name","type","outputs","stateMutability","subgraphs","constants","replaceId","uri","useBCRAvatar","Web3","infura","address","refresh","useState","useEffect","provider","web3","setWeb3","setAvatar","getAvatar","origin","contract","Promise","resolve","nft","fetch","response","metadata","image_uri","fetchAvatar","err","avatar","timeout","setTimeout","BCRAvatar","className","placeholder","props","classes","styles","href","target","src","useBCRProfile","data","reject","error","fetchProfile","setProfile","INFURA_ID","BCRProfileExample","profile","loading","join","JSON","stringify","networks","key","label","addresses","App","addr","setNetwork","avatarMap","setAvatarMap","method","headers","body","query","item","avatars","fetchAvatars","then","reduce","a","c","hasNFT","catch","alt","substr","value","onChange","event","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.023afbaf.chunk.js","sourcesContent":["export const infuras = (network, id) =>\n  ({\n    1: `https://mainnet.infura.io/v3/${id}`,\n    4: `https://rinkeby.infura.io/v3/${id}`,\n    56: 'https://bsc-dataseed.binance.org/',\n    137: 'https://rpc-mainnet.maticvigil.com/v1/7fa2effe8251c5c9816d77cadc1fe638ba8f8ed3'\n  }[network])\n\nexport const contracts = {\n  1: '0xBb9499d98C01D97Cc02B40Fa767531c308989995',\n  4: '0xD673224197Cf741365094B50b1ef1A2c99b84Cc3',\n  56: '0xbF8ef894fC52b423c50A8086415B9D5620FC64ce',\n  137: '0xbF8ef894fC52b423c50A8086415B9D5620FC64ce'\n}\n\nexport const contractABI = [\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address'\n      }\n    ],\n    name: 'getAvatar',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address'\n      }\n    ],\n    name: 'avatarNFTs',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'nft',\n        type: 'address'\n      },\n      {\n        internalType: 'uint256',\n        name: 'tokenId',\n        type: 'uint256'\n      },\n      {\n        internalType: 'bool',\n        name: 'isERC721',\n        type: 'bool'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address'\n      }\n    ],\n    name: 'getProfile',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  }\n]\n\nexport const subgraphs = {\n  1: 'https://api.studio.thegraph.com/query/2120/bcravatar-mainnet/1.0.1',\n  4: 'https://api.studio.thegraph.com/query/2120/bcravatar-rinkeby/1.2.5',\n  56: 'https://api.studio.thegraph.com/query/2120/bcravatar-bsc/1.0.1',\n  137: 'https://api.studio.thegraph.com/query/2120/bcravatar-polygon/1.0.1'\n}\n","import 'core-js/stable'\nimport React, { useState, useEffect } from 'react'\nimport { contractABI, infuras, subgraphs, contracts } from './constants'\nimport styles from './styles.module.css'\n\nexport const constants = { infuras, contracts, subgraphs }\n\nconst replaceId = (uri, id) => {\n  if (uri.includes('0x{id}')) return uri.replace('0x{id}', id)\n  else if (uri.includes('{id}')) return uri.replace('{id}', id)\n  else return uri\n}\n\nexport function fetchAvatar(address, network, web3, origin = ['', false]) {\n  const contract = new web3.eth.Contract(contractABI, contracts[network])\n  return new Promise((resolve) => {\n    Promise.all([\n      contract.methods.getAvatar(address).call(),\n      contract.methods.avatarNFTs(address).call()\n    ])\n      .then(([uri, nft]) => {\n        if (nft.tokenId > 0) {\n          fetch(replaceId(uri, nft.tokenId))\n            .then((response) => response.json())\n            .then((metadata) => {\n              if (metadata.image || metadata.image_url) {\n                const image_uri = metadata.image || metadata.image_url\n                resolve([image_uri, true])\n              } else {\n                resolve(origin)\n              }\n            })\n            .catch(() => resolve(origin))\n        } else {\n          resolve([uri, false])\n        }\n      })\n      .catch(() => resolve(origin))\n  })\n}\n\nexport function fetchAvatars(addresses, network, web3) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tavatars(where: { id_in: [\"${addresses\n            .map((item) => item.toLowerCase())\n            .join('\",\"')}\"] }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\thasNFT\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { avatars } }) => {\n        if (avatars.length) {\n          Promise.all(\n            avatars.map(\n              (avatar) =>\n                new Promise((resolve) => {\n                  if (avatar.hasNFT) {\n                    const contract = new web3.eth.Contract(\n                      contractABI,\n                      contracts[network]\n                    )\n                    Promise.all([\n                      contract.methods.getAvatar(address).call(),\n                      contract.methods.avatarNFTs(address).call()\n                    ])\n                      .then(([uri, nft]) => {\n                        fetch(replaceId(uri, nft.tokenId))\n                          .then((response) => response.json())\n                          .then((metadata) => {\n                            if (metadata.image || metadata.image_url) {\n                              const uri = metadata.image || metadata.image_url\n                              resolve([avatar.id, uri, avatar.uri !== uri])\n                            } else {\n                              resolve([avatar.id, avatar.uri, false])\n                            }\n                          })\n                          .catch(() => resolve([avatar.id, avatar.uri, false]))\n                      })\n                      .catch(() => resolve([avatar.id, avatar.uri, false]))\n                  } else {\n                    resolve([avatar.id, avatar.uri, false])\n                  }\n                })\n            )\n          )\n            .then(resolve)\n            .catch(reject)\n        } else {\n          reject({ error: 'No Avatar' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function useBCRAvatar(Web3, infura, network, address, refresh) {\n  const [web3, setWeb3] = useState(null)\n  const [avatar, setAvatar] = useState([null, false])\n\n  useEffect(() => {\n    if (!infura || !contracts[network]) return\n    const provider =\n      typeof infura === 'object' ? infura : infuras(network, infura)\n    if (!provider) return\n    if (web3) {\n      web3.setProvider(provider)\n    } else {\n      setWeb3(new Web3(provider))\n    }\n    setAvatar([null, false])\n  }, [infura, network])\n\n  const getAvatar = (address, network, web3, origin) =>\n    fetchAvatar(address, network, web3, origin)\n      .then(setAvatar)\n      .catch((err) => {\n        if (err.error === 'No Avatar') setAvatar([avatar[0], true])\n        else setAvatar([...avatar])\n      })\n\n  useEffect(() => {\n    if (!address || !web3) return\n    const timeout = !avatar[0] && !avatar[1] ? 0.5 * 1000 : refresh\n    setTimeout(() => getAvatar(address, network, web3, avatar), timeout)\n  }, [address, network, web3, refresh, avatar])\n\n  return avatar\n}\n\nexport function BCRAvatar({\n  Web3,\n  infura,\n  network,\n  address,\n  className = '',\n  placeholder = 'https://ipfs.io/ipfs/QmVaFasJTocvnuEobz7HkRpADB82z5gYA2xuZrgYFmMoQz',\n  refresh = 15 * 1000,\n  children,\n  ...props\n}) {\n  const [avatar, isNFT] = useBCRAvatar(Web3, infura, network, address, refresh)\n  const classes = [\n    isNFT ? 'bcravatar is-nft' : 'bcravatar',\n    styles.bcravatar,\n    className\n  ]\n\n  return (\n    <div className={classes.join(' ')} {...props}>\n      <a href='https://www.bcravatar.com/avatar' target='_blank'>\n        <img className='bcravatar__image' src={avatar || placeholder} />\n      </a>\n      <div className='bcravatar__content'>{children}</div>\n    </div>\n  )\n}\n\nexport function fetchProfile(network, address, web3) {\n  const contract = new web3.eth.Contract(contractABI, contracts[network])\n  return new Promise((resolve, reject) =>\n    contract.methods\n      .getProfile(address)\n      .call()\n      .then((uri) => {\n        if (uri) {\n          fetch(uri)\n            .then((response) => response.json())\n            .then((data) => {\n              resolve([data, null])\n            })\n            .catch(reject)\n        } else {\n          reject({ error: 'No Profile' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function useBCRProfile(network, address, web3) {\n  const [profile, setProfile] = useState([null, null])\n\n  useEffect(() => {\n    if (!address || !subgraphs[network]) return\n    fetchProfile(network, address, web3)\n      .then(setProfile)\n      .catch((err) => setProfile([null, err]))\n  }, [network, address, web3])\n\n  return profile\n}\n","import React, { useEffect, useState } from 'react'\nimport Web3 from 'web3'\n\nimport {\n  useBCRProfile,\n  BCRAvatar,\n  fetchAvatars,\n  constants\n} from 'react-bcravatar'\nimport 'react-bcravatar/dist/index.css'\n\nconst INFURA_ID = '9aa3d95b3bc440fa88ea12eaa4456161'\nconst shorten = (addr) => `${addr.substr(0, 6)}...${addr.substr(-4)}`\n\nfunction BCRProfileExample({\n  network,\n  address,\n  web3,\n  className = '',\n  ...props\n}) {\n  const [profile, error] = useBCRProfile(network, address, web3)\n  const loading = !profile && !error\n  const classes = [error ? 'bcrprofile error' : 'bcrprofile', className]\n\n  return (\n    <pre className={classes.join(' ')} {...props}>\n      {loading\n        ? 'Loading...'\n        : error\n        ? JSON.stringify(error, null, 4)\n        : JSON.stringify(profile, null, 4)}\n    </pre>\n  )\n}\n\nconst networks = [\n  {\n    key: 1,\n    label: 'Mainnet'\n  },\n  {\n    key: 4,\n    label: 'Rinkeby'\n  },\n  {\n    key: 56,\n    label: 'BSC'\n  },\n  {\n    key: 137,\n    label: 'Polygon'\n  }\n]\n\nconst addresses = {\n  1: [\n    '0x1Ef9882554C6DaABEcd2c7056F8811C69674fc6D',\n    '0xBb9499d98C01D97Cc02B40Fa767531c308989995'\n  ],\n  4: [\n    '0x23ABfdBd2535aC77ea60a078707a9e5820b0Fff2',\n    '0xD673224197Cf741365094B50b1ef1A2c99b84Cc3'\n  ],\n  56: [\n    '0x1Ef9882554C6DaABEcd2c7056F8811C69674fc6D',\n    '0xbF8ef894fC52b423c50A8086415B9D5620FC64ce'\n  ],\n  137: [\n    '0x1Ef9882554C6DaABEcd2c7056F8811C69674fc6D',\n    '0xbF8ef894fC52b423c50A8086415B9D5620FC64ce'\n  ]\n}\n\nconst App = () => {\n  const [web3, setWeb3] = useState(null)\n  const [network, setNetwork] = useState(networks[0].key)\n  const [[avatarMap, error], setAvatarMap] = useState([null, null])\n  useEffect(() => {\n    const web3 = new Web3(constants.infuras(network, INFURA_ID))\n    fetchAvatars(addresses[network], network, web3)\n      .then((avatars) =>\n        setAvatarMap([\n          avatars.reduce(\n            (a, c) => ({\n              ...a,\n              [c[0]]: { uri: c[1], hasNFT: c[2] }\n            }),\n            {}\n          ),\n          null\n        ])\n      )\n      .catch((err) => setAvatarMap([null, err]))\n    setWeb3(web3)\n  }, [network])\n\n  return (\n    <div>\n      <div className='avatar-wrapper'>\n        <img id='logo' src='./logo.png' alt='Crypto Utilitybia' />\n        <BCRAvatar\n          Web3={Web3}\n          infura={INFURA_ID}\n          network={network}\n          address={addresses[network][0]}\n          placeholder={'/avataaars.png'}\n        >\n          {shorten(addresses[network][0])}\n        </BCRAvatar>\n      </div>\n      <select\n        value={network}\n        onChange={(event) => setNetwork(event.target.value)}\n      >\n        {networks.map((network) => (\n          <option key={network.key} value={network.key}>\n            {network.label}\n          </option>\n        ))}\n      </select>\n      {web3 && (\n        <BCRProfileExample\n          web3={web3}\n          infura={INFURA_ID}\n          network={network}\n          address={addresses[network][0]}\n        />\n      )}\n      <pre className='bcrprofile'>\n        {!(avatarMap || error)\n          ? 'Loading...'\n          : error\n          ? JSON.stringify(error, null, 4)\n          : JSON.stringify(avatarMap, null, 4)}\n      </pre>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}