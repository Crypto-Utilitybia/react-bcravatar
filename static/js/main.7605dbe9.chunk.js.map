{"version":3,"sources":["../../src/constants.js","../../src/index.js","App.js","index.js"],"names":["contracts","1","4","56","137","contractABI","inputs","internalType","name","type","outputs","stateMutability","subgraphs","useBCRAvatar","refresh","useState","useEffect","infura","provider","network","id","infuras","web3","setWeb3","Web3","getAvatar","address","Promise","fetch","method","headers","body","JSON","query","response","data","avatars","avatar","contract","uri","metadata","resolve","reject","error","fetchAvatar","err","console","setAvatar","timer","setInterval","clearInterval","BCRAvatar","className","placeholder","props","classes","styles","href","target","src","useBCRProfile","profiles","profile","fetchProfile","setProfile","INFURA_ID","addresses","BCRProfileExample","loading","join","stringify","App","addr","avatarMap","setAvatarMap","item","fetchAvatars","then","reduce","a","c","hasNFT","catch","alt","substr","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7605dbe9.chunk.js","sourcesContent":["export const infuras = (network, id) =>\n  ({\n    1: `https://mainnet.infura.io/v3/${id}`,\n    4: `https://rinkeby.infura.io/v3/${id}`,\n    56: 'https://bsc-dataseed.binance.org/',\n    137: `https://polygon-mainnet.infura.io/v3/${id}`\n  }[network])\n\nexport const contracts = {\n  1: '',\n  4: '0x6EedE8E28C581989260da2d9401de60Ae2d4AA64',\n  56: '',\n  137: ''\n}\n\nexport const contractABI = [\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address'\n      }\n    ],\n    name: 'getAvatar',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  }\n]\n\nexport const subgraphs = {\n  1: '',\n  4: 'https://api.studio.thegraph.com/query/2120/bcravatar-rinkeby/1.2.4',\n  56: '',\n  137: ''\n}\n","import React, { useState, useEffect } from 'react'\nimport { contractABI, infuras, subgraphs, contracts } from './constants'\nimport styles from './styles.module.css'\n\nexport const constants = { contracts, subgraphs }\n\nexport function fetchAvatar(address, network, web3) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tavatars(where: { id: \"${address.toLowerCase()}\" }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\thasNFT\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { avatars } }) => avatars[0])\n      .then((avatar) => {\n        if (avatar) {\n          if (avatar.hasNFT) {\n            const contract = new web3.eth.Contract(\n              contractABI,\n              contracts[network]\n            )\n            contract.methods\n              .getAvatar(address)\n              .call()\n              .then((uri) => {\n                fetch(uri)\n                  .then((response) => response.json())\n                  .then((metadata) => {\n                    if (metadata.image || metadata.image_url) {\n                      const uri = metadata.image || metadata.image_url\n                      resolve([uri, avatar.uri !== uri])\n                    } else {\n                      resolve([avatar.uri, false])\n                    }\n                  })\n                  .catch(() => resolve([avatar.uri, false]))\n              })\n              .catch(() => resolve([avatar.uri, false]))\n          } else {\n            resolve([avatar.uri, false])\n          }\n        } else {\n          reject({ error: 'No Avatar' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function fetchAvatars(addresses, network, web3) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tavatars(where: { id_in: [\"${addresses\n            .map((item) => item.toLowerCase())\n            .join('\",\"')}\"] }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\thasNFT\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { avatars } }) => {\n        if (avatars.length) {\n          Promise.all(\n            avatars.map(\n              (avatar) =>\n                new Promise((resolve) => {\n                  if (avatar.hasNFT) {\n                    const contract = new web3.eth.Contract(\n                      contractABI,\n                      contracts[network]\n                    )\n                    contract.methods\n                      .getAvatar(address)\n                      .call()\n                      .then((uri) => {\n                        fetch(uri)\n                          .then((response) => response.json())\n                          .then((metadata) => {\n                            if (metadata.image || metadata.image_url) {\n                              const uri = metadata.image || metadata.image_url\n                              resolve([avatar.id, uri, avatar.uri !== uri])\n                            } else {\n                              resolve([avatar.id, avatar.uri, false])\n                            }\n                          })\n                          .catch(() => resolve([avatar.id, avatar.uri, false]))\n                      })\n                      .catch(() => resolve([avatar.id, avatar.uri, false]))\n                  } else {\n                    resolve([avatar.id, avatar.uri, false])\n                  }\n                })\n            )\n          )\n            .then(resolve)\n            .catch(reject)\n        } else {\n          reject({ error: 'No Avatar' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function useBCRAvatar({ Web3, infura, network, address, refresh }) {\n  const [web3, setWeb3] = useState(null)\n  const [avatar, setAvatar] = useState([null, false])\n\n  useEffect(() => {\n    if (!infura || !contracts[network]) return\n    const provider =\n      typeof infura === 'object' ? infura : infuras(network, infura)\n    if (!provider) return\n    if (web3) {\n      web3.setProvider(provider)\n    } else {\n      setWeb3(new Web3(provider))\n    }\n  }, [infura, network])\n\n  const getAvatar = (address, network, web3) =>\n    fetchAvatar(address, network, web3)\n      .then(setAvatar)\n      .catch((err) => {\n        console.log('Error: Fetch Avatar', err)\n        setAvatar('', false)\n      })\n\n  useEffect(() => {\n    if (!address || !web3) return\n    getAvatar(address, network, web3)\n    const timer = setInterval(() => getAvatar(address, network, web3), refresh)\n    return () => clearInterval(timer)\n  }, [address, network, web3, refresh])\n\n  return avatar\n}\n\nexport function BCRAvatar({\n  Web3,\n  infura,\n  network,\n  address,\n  className = '',\n  placeholder = 'https://ipfs.io/ipfs/QmVaFasJTocvnuEobz7HkRpADB82z5gYA2xuZrgYFmMoQz',\n  refresh = 15 * 1000,\n  children,\n  ...props\n}) {\n  const [avatar, isNFT] = useBCRAvatar({\n    Web3,\n    infura,\n    network,\n    address,\n    refresh\n  })\n  const classes = [\n    isNFT ? 'bcravatar is-nft' : 'bcravatar',\n    styles.bcravatar,\n    className\n  ]\n\n  return (\n    <div className={classes.join(' ')} {...props}>\n      <a href='https://www.bcravatar.com' target='_blank'>\n        <img className='bcravatar__image' src={avatar || placeholder} />\n      </a>\n      <div className='bcravatar__content'>{children}</div>\n    </div>\n  )\n}\n\nexport function fetchProfile(address, network) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tprofiles (where: { id: \"${address.toLowerCase()}\" }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { profiles } }) => profiles[0])\n      .then((profile) => {\n        if (profile) {\n          fetch(profile.uri)\n            .then((response) => response.json())\n            .then((data) => {\n              resolve([data, null])\n            })\n            .catch(reject)\n        } else {\n          reject({ error: 'No Profile' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function useBCRProfile(network, address) {\n  const [profile, setProfile] = useState([null, null])\n\n  useEffect(() => {\n    if (!address || !subgraphs[network]) return\n    fetchProfile(address, network)\n      .then(setProfile)\n      .catch((err) => setProfile([null, err]))\n  }, [address, network])\n\n  return profile\n}\n","import React, { useEffect, useState } from 'react'\nimport Web3 from 'web3'\n\nimport { useBCRProfile, BCRAvatar, fetchAvatars } from 'react-bcravatar'\nimport 'react-bcravatar/dist/index.css'\n\nconst INFURA_ID = '9aa3d95b3bc440fa88ea12eaa4456161'\nconst web3 = new Web3(`https://rinkeby.infura.io/v3/${INFURA_ID}`)\nconst addresses = [\n  '0x23ABfdBd2535aC77ea60a078707a9e5820b0Fff2',\n  '0xD673224197Cf741365094B50b1ef1A2c99b84Cc3'\n]\nconst shorten = (addr) => `${addr.substr(0, 6)}...${addr.substr(-4)}`\n\nfunction BCRProfileExample({\n  network,\n  address,\n  className = '',\n  placeholder = 'https://ipfs.io/ipfs/QmVaFasJTocvnuEobz7HkRpADB82z5gYA2xuZrgYFmMoQz',\n  ...props\n}) {\n  const [profile, error] = useBCRProfile(network, address)\n  const loading = !profile && !error\n  const classes = [error ? 'bcrprofile error' : 'bcrprofile', className]\n\n  return (\n    <pre className={classes.join(' ')} {...props}>\n      {loading\n        ? 'Loading...'\n        : error\n        ? JSON.stringify(error, null, 4)\n        : JSON.stringify(profile, null, 4)}\n    </pre>\n  )\n}\n\nconst App = () => {\n  const [[avatarMap, error], setAvatarMap] = useState([null, null])\n  useEffect(() => {\n    fetchAvatars(addresses, 4, web3)\n      .then((avatars) =>\n        setAvatarMap([\n          avatars.reduce(\n            (a, c) => ({\n              ...a,\n              [c[0]]: { uri: c[1], hasNFT: c[2] }\n            }),\n            {}\n          ),\n          null\n        ])\n      )\n      .catch((err) => setAvatarMap([null, err]))\n  }, [])\n\n  return (\n    <div>\n      <div className='avatar-wrapper'>\n        <img id='logo' src='./logo.png' alt='Crypto Utilitybia' />\n        <BCRAvatar\n          Web3={Web3}\n          infura={INFURA_ID}\n          network={4}\n          address={addresses[0]}\n        >\n          {shorten(addresses[0])}\n        </BCRAvatar>\n      </div>\n      <BCRProfileExample\n        infura={INFURA_ID}\n        network={4}\n        address={addresses[0]}\n      />\n      <pre className='bcrprofile'>\n        {!(avatarMap || error)\n          ? 'Loading...'\n          : error\n          ? JSON.stringify(error, null, 4)\n          : JSON.stringify(avatarMap, null, 4)}\n      </pre>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}