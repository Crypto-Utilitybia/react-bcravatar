{"version":3,"sources":["../../src/constants.js","../../src/index.js","App.js","index.js"],"names":["infuras","1","4","137","contracts","contractABI","inputs","internalType","name","type","outputs","stateMutability","subgraphs","useBCRAvatar","Web3","infura","network","address","useState","useEffect","provider","web3","setWeb3","Promise","fetch","method","headers","body","JSON","query","response","data","avatars","avatar","contract","uri","metadata","resolve","reject","error","fetchAvatar","err","console","setAvatar","BCRAvatar","className","placeholder","props","classes","styles","href","target","src","useBCRProfile","profiles","profile","fetchProfile","setProfile","INFURA_ID","addresses","BCRProfileExample","loading","join","stringify","App","addr","avatarMap","setAvatarMap","item","fetchAvatars","then","reduce","a","c","hasNFT","catch","id","alt","substr","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b297879c.chunk.js","sourcesContent":["export const infuras = {\n\t1: 'https://mainnet.infura.io/v3/',\n\t4: 'https://rinkeby.infura.io/v3/',\n\t137: 'https://polygon-mainnet.infura.io/v3/',\n};\n\nexport const contracts = {\n\t1: '',\n\t4: '0x6EedE8E28C581989260da2d9401de60Ae2d4AA64',\n\t137: '',\n};\n\nexport const contractABI = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'address',\n\t\t\t\tname: 'account',\n\t\t\t\ttype: 'address',\n\t\t\t},\n\t\t],\n\t\tname: 'getAvatar',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'view',\n\t\ttype: 'function',\n\t},\n];\n\nexport const subgraphs = {\n\t1: '',\n\t4: 'https://api.studio.thegraph.com/query/2120/bcravatar-rinkeby/1.2.3',\n\t137: '',\n};\n","import React, { useState, useEffect } from 'react'\nimport { contractABI, infuras, subgraphs, contracts } from './constants'\nimport styles from './styles.module.css'\n\nexport function fetchAvatar(address, network, web3) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tavatars(where: { id: \"${address.toLowerCase()}\" }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\thasNFT\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { avatars } }) => avatars[0])\n      .then((avatar) => {\n        if (avatar) {\n          if (avatar.hasNFT) {\n            const contract = new web3.eth.Contract(\n              contractABI,\n              contracts[network]\n            )\n            contract.methods\n              .getAvatar(address)\n              .call()\n              .then((uri) => {\n                fetch(uri)\n                  .then((response) => response.json())\n                  .then((metadata) => {\n                    if (metadata.image || metadata.image_url) {\n                      const uri = metadata.image || metadata.image_url\n                      resolve([uri, avatar.uri !== uri])\n                    } else {\n                      resolve([avatar.uri, false])\n                    }\n                  })\n                  .catch(() => resolve([avatar.uri, false]))\n              })\n              .catch(() => resolve([avatar.uri, false]))\n          } else {\n            resolve([avatar.uri, false])\n          }\n        } else {\n          reject({ error: 'No Avatar' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function fetchAvatars(addresses, network, web3) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tavatars(where: { id_in: [\"${addresses\n            .map((item) => item.toLowerCase())\n            .join('\",\"')}\"] }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\thasNFT\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { avatars } }) => {\n        if (avatars.length) {\n          Promise.all(\n            avatars.map(\n              (avatar) =>\n                new Promise((resolve) => {\n                  if (avatar.hasNFT) {\n                    const contract = new web3.eth.Contract(\n                      contractABI,\n                      contracts[network]\n                    )\n                    contract.methods\n                      .getAvatar(address)\n                      .call()\n                      .then((uri) => {\n                        fetch(uri)\n                          .then((response) => response.json())\n                          .then((metadata) => {\n                            if (metadata.image || metadata.image_url) {\n                              const uri = metadata.image || metadata.image_url\n                              resolve([avatar.id, uri, avatar.uri !== uri])\n                            } else {\n                              resolve([avatar.id, avatar.uri, false])\n                            }\n                          })\n                          .catch(() => resolve([avatar.id, avatar.uri, false]))\n                      })\n                      .catch(() => resolve([avatar.id, avatar.uri, false]))\n                  } else {\n                    resolve([avatar.id, avatar.uri, false])\n                  }\n                })\n            )\n          )\n            .then(resolve)\n            .catch(reject)\n        } else {\n          reject({ error: 'No Avatar' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function useBCRAvatar(Web3, infura, network, address) {\n  const [web3, setWeb3] = useState(null)\n  const [avatar, setAvatar] = useState([null, false])\n\n  useEffect(() => {\n    if (!infura || !contracts[network]) return\n    const provider =\n      typeof infura === 'object' || !infuras[network]\n        ? infura\n        : `${infuras[network]}${infura}`\n    if (web3) {\n      web3.setProvider(provider)\n    } else {\n      setWeb3(new Web3(provider))\n    }\n  }, [infura, network])\n\n  useEffect(() => {\n    if (!address || !web3) return\n    fetchAvatar(address, network, web3)\n      .then(setAvatar)\n      .catch((err) => {\n        console.log('Error: Fetch Avatar', err)\n        setAvatar('', false)\n      })\n  }, [address, network, web3])\n\n  return avatar\n}\n\nexport function BCRAvatar({\n  Web3,\n  infura,\n  network,\n  address,\n  className = '',\n  placeholder = 'https://ipfs.io/ipfs/QmVaFasJTocvnuEobz7HkRpADB82z5gYA2xuZrgYFmMoQz',\n  children,\n  ...props\n}) {\n  const [avatar, isNFT] = useBCRAvatar(Web3, infura, network, address)\n  const classes = [\n    isNFT ? 'bcravatar is-nft' : 'bcravatar',\n    styles.bcravatar,\n    className\n  ]\n\n  return (\n    <div className={classes.join(' ')} {...props}>\n      <a href='https://www.bcravatar.com' target='_blank'>\n        <img className='bcravatar__image' src={avatar || placeholder} />\n      </a>\n      <div className='bcravatar__content'>{children}</div>\n    </div>\n  )\n}\n\nexport function fetchProfile(address, network) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tprofiles (where: { id: \"${address.toLowerCase()}\" }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { profiles } }) => profiles[0])\n      .then((profile) => {\n        if (profile) {\n          fetch(profile.uri)\n            .then((response) => response.json())\n            .then((data) => {\n              resolve([data, null])\n            })\n            .catch(reject)\n        } else {\n          reject({ error: 'No Profile' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function useBCRProfile(network, address) {\n  const [profile, setProfile] = useState([null, null])\n\n  useEffect(() => {\n    if (!address || !subgraphs[network]) return\n    fetchProfile(address, network)\n      .then(setProfile)\n      .catch((err) => setProfile([null, err]))\n  }, [address, network])\n\n  return profile\n}\n","import React, { useEffect, useState } from 'react'\nimport Web3 from 'web3'\n\nimport { useBCRProfile, BCRAvatar, fetchAvatars } from 'react-bcravatar'\nimport 'react-bcravatar/dist/index.css'\n\nconst web3 = new Web3(`https://rinkeby.infura.io/v3/${INFURA_ID}`)\n\nconst INFURA_ID = '9aa3d95b3bc440fa88ea12eaa4456161'\nconst addresses = [\n  '0x23ABfdBd2535aC77ea60a078707a9e5820b0Fff2',\n  '0x6EedE8E28C581989260da2d9401de60Ae2d4AA64'\n]\nconst shorten = (addr) => `${addr.substr(0, 6)}...${addr.substr(-4)}`\n\nfunction BCRProfileExample({\n  network,\n  address,\n  className = '',\n  placeholder = 'https://ipfs.io/ipfs/QmVaFasJTocvnuEobz7HkRpADB82z5gYA2xuZrgYFmMoQz',\n  ...props\n}) {\n  const [profile, error] = useBCRProfile(network, address)\n  const loading = !profile && !error\n  const classes = [error ? 'bcrprofile error' : 'bcrprofile', className]\n\n  return (\n    <pre className={classes.join(' ')} {...props}>\n      {loading\n        ? 'Loading...'\n        : error\n        ? JSON.stringify(error, null, 4)\n        : JSON.stringify(profile, null, 4)}\n    </pre>\n  )\n}\n\nconst App = () => {\n  const [[avatarMap, error], setAvatarMap] = useState([null, null])\n  useEffect(() => {\n    fetchAvatars(addresses, 4, web3)\n      .then((avatars) =>\n        setAvatarMap([\n          avatars.reduce(\n            (a, c) => ({\n              ...a,\n              [c[0]]: { uri: c[1], hasNFT: c[2] }\n            }),\n            {}\n          ),\n          null\n        ])\n      )\n      .catch((err) => setAvatarMap([null, err]))\n  })\n\n  return (\n    <div>\n      <div className='avatar-wrapper'>\n        <img id='logo' src='./logo.png' alt='Crypto Utilitybia' />\n        <BCRAvatar\n          Web3={Web3}\n          infura={INFURA_ID}\n          network={4}\n          address={addresses[0]}\n        >\n          {shorten(addresses[0])}\n        </BCRAvatar>\n      </div>\n      <BCRProfileExample\n        infura={INFURA_ID}\n        network={4}\n        address={addresses[0]}\n      />\n      <pre className='bcrprofile'>\n        {!(avatarMap || error)\n          ? 'Loading...'\n          : error\n          ? JSON.stringify(error, null, 4)\n          : JSON.stringify(avatarMap, null, 4)}\n      </pre>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}