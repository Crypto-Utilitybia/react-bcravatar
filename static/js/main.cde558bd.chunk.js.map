{"version":3,"sources":["../../src/constants.js","../../src/index.js","App.js","index.js"],"names":["contracts","1","4","56","137","contractABI","inputs","internalType","name","type","outputs","stateMutability","subgraphs","useBCRAvatar","Web3","infura","network","address","refresh","useState","web3","setWeb3","avatar","setAvatar","useEffect","provider","id","infuras","getAvatar","Promise","fetch","method","headers","body","JSON","query","response","contract","metadata","uri","resolve","reject","error","fetchAvatar","console","timer","setInterval","clearInterval","BCRAvatar","className","placeholder","children","props","classes","styles","href","target","src","useBCRProfile","profile","setProfile","data","fetchProfile","INFURA_ID","BCRProfileExample","loading","join","stringify","networks","key","label","addresses","App","addr","setNetwork","avatarMap","setAvatarMap","item","avatars","fetchAvatars","then","reduce","a","c","hasNFT","catch","err","alt","substr","value","onChange","event","map","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cde558bd.chunk.js","sourcesContent":["export const infuras = (network, id) =>\n  ({\n    1: `https://mainnet.infura.io/v3/${id}`,\n    4: `https://rinkeby.infura.io/v3/${id}`,\n    56: 'https://bsc-dataseed.binance.org/',\n    137: `https://polygon-mainnet.infura.io/v3/${id}`\n  }[network])\n\nexport const contracts = {\n  1: '0xBb9499d98C01D97Cc02B40Fa767531c308989995',\n  4: '0xD673224197Cf741365094B50b1ef1A2c99b84Cc3',\n  56: '0xbF8ef894fC52b423c50A8086415B9D5620FC64ce',\n  137: '0xbF8ef894fC52b423c50A8086415B9D5620FC64ce'\n}\n\nexport const contractABI = [\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address'\n      }\n    ],\n    name: 'getAvatar',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string'\n      }\n    ],\n    stateMutability: 'view',\n    type: 'function'\n  }\n]\n\nexport const subgraphs = {\n  1: 'https://api.studio.thegraph.com/query/2120/bcravatar-mainnet/1.0.1',\n  4: 'https://api.studio.thegraph.com/query/2120/bcravatar-rinkeby/1.2.5',\n  56: 'https://api.studio.thegraph.com/query/2120/bcravatar-bsc/1.0.1',\n  137: 'https://api.studio.thegraph.com/query/2120/bcravatar-polygon/1.0.1'\n}\n","import React, { useState, useEffect } from 'react'\nimport { contractABI, infuras, subgraphs, contracts } from './constants'\nimport styles from './styles.module.css'\n\nexport const constants = { contracts, subgraphs }\n\nexport function fetchAvatar(address, network, web3) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tavatars(where: { id: \"${address.toLowerCase()}\" }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\thasNFT\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { avatars } }) => avatars[0])\n      .then((avatar) => {\n        if (avatar) {\n          if (avatar.hasNFT) {\n            const contract = new web3.eth.Contract(\n              contractABI,\n              contracts[network]\n            )\n            contract.methods\n              .getAvatar(address)\n              .call()\n              .then((uri) => {\n                fetch(uri)\n                  .then((response) => response.json())\n                  .then((metadata) => {\n                    if (metadata.image || metadata.image_url) {\n                      const uri = metadata.image || metadata.image_url\n                      resolve([uri, avatar.uri !== uri])\n                    } else {\n                      resolve([avatar.uri, false])\n                    }\n                  })\n                  .catch(() => resolve([avatar.uri, false]))\n              })\n              .catch(() => resolve([avatar.uri, false]))\n          } else {\n            resolve([avatar.uri, false])\n          }\n        } else {\n          reject({ error: 'No Avatar' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function fetchAvatars(addresses, network, web3) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tavatars(where: { id_in: [\"${addresses\n            .map((item) => item.toLowerCase())\n            .join('\",\"')}\"] }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\thasNFT\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { avatars } }) => {\n        if (avatars.length) {\n          Promise.all(\n            avatars.map(\n              (avatar) =>\n                new Promise((resolve) => {\n                  if (avatar.hasNFT) {\n                    const contract = new web3.eth.Contract(\n                      contractABI,\n                      contracts[network]\n                    )\n                    contract.methods\n                      .getAvatar(address)\n                      .call()\n                      .then((uri) => {\n                        fetch(uri)\n                          .then((response) => response.json())\n                          .then((metadata) => {\n                            if (metadata.image || metadata.image_url) {\n                              const uri = metadata.image || metadata.image_url\n                              resolve([avatar.id, uri, avatar.uri !== uri])\n                            } else {\n                              resolve([avatar.id, avatar.uri, false])\n                            }\n                          })\n                          .catch(() => resolve([avatar.id, avatar.uri, false]))\n                      })\n                      .catch(() => resolve([avatar.id, avatar.uri, false]))\n                  } else {\n                    resolve([avatar.id, avatar.uri, false])\n                  }\n                })\n            )\n          )\n            .then(resolve)\n            .catch(reject)\n        } else {\n          reject({ error: 'No Avatar' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function useBCRAvatar({ Web3, infura, network, address, refresh }) {\n  const [web3, setWeb3] = useState(null)\n  const [avatar, setAvatar] = useState([null, false])\n\n  useEffect(() => {\n    if (!infura || !contracts[network]) return\n    const provider =\n      typeof infura === 'object' ? infura : infuras(network, infura)\n    if (!provider) return\n    if (web3) {\n      web3.setProvider(provider)\n    } else {\n      setWeb3(new Web3(provider))\n    }\n  }, [infura, network])\n\n  const getAvatar = (address, network, web3) =>\n    fetchAvatar(address, network, web3)\n      .then(setAvatar)\n      .catch((err) => {\n        console.log('Error: Fetch Avatar', err)\n        setAvatar('', false)\n      })\n\n  useEffect(() => {\n    if (!address || !web3) return\n    getAvatar(address, network, web3)\n    const timer = setInterval(() => getAvatar(address, network, web3), refresh)\n    return () => clearInterval(timer)\n  }, [address, network, web3, refresh])\n\n  return avatar\n}\n\nexport function BCRAvatar({\n  Web3,\n  infura,\n  network,\n  address,\n  className = '',\n  placeholder = 'https://ipfs.io/ipfs/QmVaFasJTocvnuEobz7HkRpADB82z5gYA2xuZrgYFmMoQz',\n  refresh = 15 * 1000,\n  children,\n  ...props\n}) {\n  const [avatar, isNFT] = useBCRAvatar({\n    Web3,\n    infura,\n    network,\n    address,\n    refresh\n  })\n  const classes = [\n    isNFT ? 'bcravatar is-nft' : 'bcravatar',\n    styles.bcravatar,\n    className\n  ]\n\n  return (\n    <div className={classes.join(' ')} {...props}>\n      <a href='https://www.bcravatar.com' target='_blank'>\n        <img className='bcravatar__image' src={avatar || placeholder} />\n      </a>\n      <div className='bcravatar__content'>{children}</div>\n    </div>\n  )\n}\n\nexport function fetchProfile(address, network) {\n  return new Promise((resolve, reject) =>\n    fetch(subgraphs[network], {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: `{\n\t\t\t\t\tprofiles (where: { id: \"${address.toLowerCase()}\" }) {\n\t\t\t\t\t\tid,\n\t\t\t\t\t\turi\n\t\t\t\t\t}\n\t\t\t\t}`\n      })\n    })\n      .then((response) => response.json())\n      .then(({ data: { profiles } }) => profiles[0])\n      .then((profile) => {\n        if (profile) {\n          fetch(profile.uri)\n            .then((response) => response.json())\n            .then((data) => {\n              resolve([data, null])\n            })\n            .catch(reject)\n        } else {\n          reject({ error: 'No Profile' })\n        }\n      })\n      .catch(reject)\n  )\n}\n\nexport function useBCRProfile(network, address) {\n  const [profile, setProfile] = useState([null, null])\n\n  useEffect(() => {\n    if (!address || !subgraphs[network]) return\n    fetchProfile(address, network)\n      .then(setProfile)\n      .catch((err) => setProfile([null, err]))\n  }, [address, network])\n\n  return profile\n}\n","import React, { useEffect, useState } from 'react'\nimport Web3 from 'web3'\n\nimport { useBCRProfile, BCRAvatar, fetchAvatars } from 'react-bcravatar'\nimport 'react-bcravatar/dist/index.css'\n\nconst INFURA_ID = '9aa3d95b3bc440fa88ea12eaa4456161'\nconst web3 = new Web3(`https://rinkeby.infura.io/v3/${INFURA_ID}`)\nconst shorten = (addr) => `${addr.substr(0, 6)}...${addr.substr(-4)}`\n\nfunction BCRProfileExample({\n  network,\n  address,\n  className = '',\n  placeholder = 'https://ipfs.io/ipfs/QmVaFasJTocvnuEobz7HkRpADB82z5gYA2xuZrgYFmMoQz',\n  ...props\n}) {\n  const [profile, error] = useBCRProfile(network, address)\n  const loading = !profile && !error\n  const classes = [error ? 'bcrprofile error' : 'bcrprofile', className]\n\n  return (\n    <pre className={classes.join(' ')} {...props}>\n      {loading\n        ? 'Loading...'\n        : error\n        ? JSON.stringify(error, null, 4)\n        : JSON.stringify(profile, null, 4)}\n    </pre>\n  )\n}\n\nconst networks = [\n  {\n    key: 1,\n    label: 'Mainnet'\n  },\n  {\n    key: 4,\n    label: 'Rinkeby'\n  },\n  {\n    key: 56,\n    label: 'BSC'\n  },\n  {\n    key: 137,\n    label: 'Polygon'\n  }\n]\n\nconst addresses = {\n  1: [\n    '0x1Ef9882554C6DaABEcd2c7056F8811C69674fc6D',\n    '0xBb9499d98C01D97Cc02B40Fa767531c308989995'\n  ],\n  4: [\n    '0x23ABfdBd2535aC77ea60a078707a9e5820b0Fff2',\n    '0xD673224197Cf741365094B50b1ef1A2c99b84Cc3'\n  ],\n  56: [\n    '0x1Ef9882554C6DaABEcd2c7056F8811C69674fc6D',\n    '0xbF8ef894fC52b423c50A8086415B9D5620FC64ce'\n  ],\n  137: [\n    '0x1Ef9882554C6DaABEcd2c7056F8811C69674fc6D',\n    '0xbF8ef894fC52b423c50A8086415B9D5620FC64ce'\n  ]\n}\n\nconst App = () => {\n  const [network, setNetwork] = useState(networks[0].key)\n  const [[avatarMap, error], setAvatarMap] = useState([null, null])\n  useEffect(() => {\n    fetchAvatars(addresses[network], network, web3)\n      .then((avatars) =>\n        setAvatarMap([\n          avatars.reduce(\n            (a, c) => ({\n              ...a,\n              [c[0]]: { uri: c[1], hasNFT: c[2] }\n            }),\n            {}\n          ),\n          null\n        ])\n      )\n      .catch((err) => setAvatarMap([null, err]))\n  }, [network])\n\n  return (\n    <div>\n      <div className='avatar-wrapper'>\n        <img id='logo' src='./logo.png' alt='Crypto Utilitybia' />\n        <BCRAvatar\n          Web3={Web3}\n          infura={INFURA_ID}\n          network={network}\n          address={addresses[network][0]}\n        >\n          {shorten(addresses[network][0])}\n        </BCRAvatar>\n      </div>\n      <select\n        value={network}\n        onChange={(event) => setNetwork(event.target.value)}\n      >\n        {networks.map((network) => (\n          <option key={network.key} value={network.key}>\n            {network.label}\n          </option>\n        ))}\n      </select>\n      <BCRProfileExample\n        infura={INFURA_ID}\n        network={network}\n        address={addresses[network][0]}\n      />\n      <pre className='bcrprofile'>\n        {!(avatarMap || error)\n          ? 'Loading...'\n          : error\n          ? JSON.stringify(error, null, 4)\n          : JSON.stringify(avatarMap, null, 4)}\n      </pre>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}